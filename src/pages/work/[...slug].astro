---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import "tailwindcss";

import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';

interface Props {
	entry: CollectionEntry<'work'>;
}

// TODO הקובץ שיהיה צריך להוריד יהיה קובץ zip עם סיסמה שבתוכו יהיה DataPack וכך אני אמנע את בעיית זכויות היוצרים. אני אבקש להוריד את המפה בנפרד
// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const work = await getCollection('work');
	return work.map((entry) => ({
		params: { slug: entry.id },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content } = await render(entry);
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
	<div class="stack gap-2" dir="rtl">
		<header>
			<div class="wrapper stack gap-2">

				<a class="back-link" href="/translations/">חזרה</a>
				<Hero title={(entry.data.title_heb ? entry.data.title_heb : entry.data.title) + " - תרגום לעברית"} align="start">
					<div class="details">
						<div class="tags">
							{entry.data.tags.map((t) => <Pill>{t}</Pill>)}
						</div>
						<p class="description">{entry.data.description ?? ""}</p>
					</div>
				</Hero>

			</div>
		</header>

		<main class="wrapper">
			<div class="window-container">

				<div class="text-section">
					<h4>יוצר המפה</h4>
					{entry.data.websiteX &&
						<p class="inline"><Icon icon="twitter-logo" size="1.2em"/><a target="_blank" rel="noopener noreferrer" href={entry.data.websiteX}>{entry.data.creatorName ?? "לחץ כאן"}</a></p>
					}

					<Content />

					<button class="cta-button">לחץ כאן</button>
				</div>

				<div class="image-section">
					{entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''} class="rounded-image">}
				</div>

			</div>
		</main>
	</div>
</BaseLayout>

<style>

	.window-container {
		background-color: azure;
		border-radius: 20px;
		box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		width: 100%;
		display: flex;
		transition: transform 0.3s ease, box-shadow 0.3s ease;
		margin-inline:auto;
    }

	.text-section {
		flex: 1;
		padding: 40px 30px;
		display: flex;
		flex-direction: column;
		justify-content: center;
	}

	.text-section h2 {
		color: #333;
		font-size: 28px;
		margin-bottom: 20px;
		font-weight: bold;
	}

	.text-section p {
		color: #666;
		line-height: 1.8;
		font-size: 16px;
		margin-bottom: 15px;
	}

	.highlight-text {
		background: linear-gradient(120deg, #667eea, #764ba2);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		font-weight: bold;
	}

	.image-section {
		flex: 1;
		padding: 20px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.rounded-image {
		border-radius: 20px;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
		transition: transform 0.3s ease;
	}

	.rounded-image:hover {
		transform: scale(1.05);
	}

	.cta-button {
		background: linear-gradient(135deg, #667eea, #764ba2);
		color: white;
		border: none;
		padding: 12px 25px;
		border-radius: 25px;
		font-size: 16px;
		cursor: pointer;
		margin-top: 20px;
		transition: all 0.3s ease;
		align-self: flex-start;
	}

	.cta-button:hover {
		transform: translateY(-2px);
		box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
	}

	@media (max-width: 768px) {
		.window-container {
			flex-direction: column;
			margin: 10px;
		}

		.text-section, .image-section {
			flex: none;
		}

		.text-section h2 {
			font-size: 24px;
		}
	}

		header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}

    .inline {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        white-space: nowrap;
    }
</style>
