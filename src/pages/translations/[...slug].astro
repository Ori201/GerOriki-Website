---
import { type CollectionEntry, getCollection, render } from 'astro:content';
import "tailwindcss";


import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';

import { Swiper, SwiperWrapper, SwiperSlide, SwiperButtonPrev, SwiperButtonNext } from "astro-swiper";
import type { AstroSwiperType } from "astro-swiper";
import { date } from 'astro:schema';

const astroSwiperOptions: AstroSwiperType = {
  options: {
    loop: true,
    navigation: {
      nextEl: '.swiper-button-next',
      prevEl: '.swiper-button-prev',
    },
  },
};

interface Props {
	entry: CollectionEntry<'translations'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const translations = await getCollection('translations');
	return translations.map((entry) => ({
		params: { slug: entry.id },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content } = await render(entry);
---

<BaseLayout title={`תרגום ל${entry.data.type} - ${entry.data.title}`} description={entry.data.description}>
	<div class="stack gap-2" dir="rtl">
		<header>
			<div class="wrapper stack gap-2">
				<a class="back-link" href="/translations/">חזרה</a>
				<Hero title={(entry.data.title_heb ? entry.data.title_heb : entry.data.title) + " - תרגום לעברית"} align="start">
					<div class="details">
						<div class="tags">
							{entry.data.tags.map((t) => <Pill>{t}</Pill>)}
						</div>
						<p class="description">{entry.data.description ?? ""}</p>
					</div>
				</Hero>
			</div>
		</header>

		<main class="wrapper">
			<div class="window-container">

				<div class="text-section">
					<h4>מידע על ה{entry.data.type}</h4>

					{entry.data.title &&
						<p><b>שם ה{entry.data.type}: </b>{entry.data.title}</p>
					}
					{ entry.data.creatorName &&
						<p><b>יוצר ה{entry.data.type}: </b>{entry.data.creatorName}</p>
					}
					{ entry.data.version &&
						<p><b>גרסת מיינקראפט: </b>{entry.data.version}</p>
					}
					{ entry.data.PlayerAmount &&
						<p><b>כמות שחקנים: </b>{entry.data.PlayerAmount}</p>
					}
					{entry.data.description &&
						<h4 style="margin-top: 20px;">תיאור ה{entry.data.type}</h4>
						<p>{entry.data.description}</p>
					}
					
					<h4 style="margin-top: 20px;">יוצר ה{entry.data.type}</h4>

					{[
					{ icon: "youtube-logo", url: entry.data.youtube },
					{ icon: "x-logo", url: entry.data.websiteX },
					{ icon: "ko-fi-logo", url: entry.data.ko_fi }
					].filter(link => link.url).map(({icon, url}) => (
						<p class="inline">
						<Icon icon={icon} size="1.2em"/>
							<a target="_blank" rel="noopener noreferrer nofollow" href={url}>
								{entry.data.creatorName ?? "לחץ כאן"}
							</a>
						</p>
					))}

					<div class="content">
						<Content />
					</div>


					<div class="rounded-image buttons">
						{entry.data.translateMap &&
							<a href={entry.data.translateMap} target="_blank" download class="cta-button">
								הורדת המפה המתורגמת
							</a>
						}
						{entry.data.downloadFile &&
							<a href={entry.data.downloadFile} target="_blank" download class="cta-button">
								הורדת ה{entry.data.type}
							</a>
						}
						{ entry.data.translateDataPack &&
							<a href={entry.data.translateDataPack} target="_blank" download class="cta-button">
								הורדת חבילת הנתונים
							</a>
						}
						{entry.data.translatePack &&
							<a href={entry.data.translatePack} target="_blank" download class="cta-button">
								הורדת התרגום (חבילת משאבים)
							</a>
						}
					</div>
				</div>

				<div class="image-section">
					<Swiper options={astroSwiperOptions.options} class="rounded-image not-content">
						<SwiperWrapper>
							{Array.isArray(entry.data.youtube_video) &&
								entry.data.youtube_video.map((src, index) => (
									<SwiperSlide key={index}>
										<iframe
										width="850"
										height="478"
										src={src}
										allow="
											accelerometer;
											autoplay;
											clipboard-write;
											encrypted-media;
											gyroscope;
											picture-in-picture;
											web-share"
										referrerpolicy="strict-origin-when-cross-origin"
										allowfullscreen
										></iframe>
									</SwiperSlide>
								))
							}
							{Array.isArray(entry.data.img) &&
							entry.data.img.map((src, index) => (
								<SwiperSlide key={index}>
								<img src={src} alt={`תמונה ${index + 1}`} />
								</SwiperSlide>
							))
							}
						</SwiperWrapper>

						<SwiperButtonPrev />
						<SwiperButtonNext />
					</Swiper>
				</div>
			</div>
		</main>
	</div>
</BaseLayout>

<style>
	.buttons {
		background-color: #73efff6e;
		display: grid;
		margin-left: 25px;
		margin-right: 25px;
		margin-top: 30px;
		min-width: 20ch;
	}
	.swiper {
		max-width: 600px;
		aspect-ratio: 16/9;
	}

	img, iframe {
		max-width: 100%;
		height: 100%;
	}

	.window-container {
		background-color: azure;
		border-radius: 20px;
		box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		display: flex;
		transition: transform 0.3s ease, box-shadow 0.3s ease;
		margin-inline:auto;
    }


	.text-section {
		flex: 1;
		padding: 60px 30px;
		display: flex;
		flex-direction: column;
	}

	.text-section h2 {
		color: #333;
		font-size: 28px;
		margin-bottom: 20px;
		font-weight: bold;
	}

	.text-section h4 {
		margin-bottom: 20px;
	}

	.text-section p {
		color: #666;
		font-size: 16px;
		margin-bottom: 5px;
	}

	.highlight-text {
		background: linear-gradient(120deg, #667eea, #764ba2);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		font-weight: bold;
	}

	.image-section {
		flex: 1;
		padding-left: 8%;
		padding-right: 4%;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.rounded-image {
		border-radius: 20px;
		box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
		transition: transform 0.3s ease;
	}

	.cta-button {
		background: linear-gradient(135deg, #66b5ea, #4ba28f);
		color: white;
		border: none;
		padding: 12px 25px;
		border-radius: 20px;
		font-size: 16px;
		font-weight: bold;
		cursor: pointer;
		transition: all 0.3s ease;
		margin: 10px 20px;
		text-decoration: none;
		display: inline-flex;
		align-items: center;
		justify-content: center;
		text-align: center;
	}



	.cta-button:hover {
		transform: translateY(-2px);
		box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
	}

	@media (max-width: 1070px) {
		.window-container {
			flex-direction: column;
			margin: 10px;
		}

		.text-section {
			padding: 30px 30px;
        	order: 2;
    	}
    	.image-section {
			margin-top: 8%;
			padding-right: 8%;
       		order: 1;
    	}

		.text-section, .image-section {
			flex: none;
		}

		.text-section h2 {
			font-size: 24px;
		}
	}

		header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
	}
	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 20px 0;
	}


	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-family: var(--font-brand);
		font-style: italic;
		font-size: large;
		font-weight: 600;
		line-height: 1.1;
		margin: 20px;
		padding-inline-start: 0.4rem;
		border-inline-start: 0.25rem solid gray;
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}
	}

    .inline {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        white-space: nowrap;
    }
</style>
